// number of pairs a, b such that l <= a , b <= r with ANDing x 
	static long [][][] memo;
	static char [] l, r, x;
	static long dp(int idx, int maskL, int maskR) {
		if(idx == l.length) {
			return 1;
		}
		if(memo[idx][maskL][maskR] != -1)
			return memo[idx][maskL][maskR];
		int bitL1 = (maskL & 1) != 0 ? (l[idx] - '0') : 0, bitL2 = (maskL & 2) != 0 ? (l[idx] - '0') : 0;
		int bitR1 = (maskR & 1) != 0 ? (r[idx] - '0') : 1, bitR2 = (maskR & 2) != 0 ? (r[idx] - '0') : 1;
		long ans = 0;
		for(int i = bitL1; i <= bitR1; i++) {
			for(int j = bitL2; j <= bitR2; j++) {
				int curBitOFX = i & j;
				if(curBitOFX != x[idx] - '0')
					continue;
				int newBitL1 = ((maskL & 1) != 0 && (i == bitL1)) ? 1 : 0;
				int newBitL2 = ((maskL & 2) != 0 && (j == bitL2)) ? 1 : 0;
				int newBitR1 = ((maskR & 1) != 0 && (i == bitR1)) ? 1 : 0;
				int newBitR2 = ((maskR & 2) != 0 && (j == bitR2)) ? 1 : 0;
				ans += dp(idx + 1, newBitL1 | (newBitL2 << 1), newBitR1 | (newBitR2 << 1));
			}
		}
		return memo[idx][maskL][maskR] = ans;
		
	}
	
	static void solve()throws Exception {
		int a = sc.nextInt(), b = sc.nextInt(), c = sc.nextInt();
		String tempL = Integer.toBinaryString(b), tempR = Integer.toBinaryString(c), tempX = Integer.toBinaryString(a);
		int mx = Math.max(tempL.length(), Math.max(tempR.length(), tempX.length()));
		while(tempL.length() < mx) {
			tempL = "0" + tempL;
		}
		while(tempR.length() < mx) {
			tempR = "0" + tempR;
		}
		while(tempX.length() < mx) {
			tempX = "0" + tempX;
		}
		x = tempX.toCharArray();
		l = tempL.toCharArray();
		r = tempR.toCharArray();
		memo = new long[r.length][4][4];
		for(long [][] f: memo) {
			for(long [] g: f) {
				Arrays.fill(g, -1);
			}
		}
		pw.println(dp(0, 3, 3));
	}
	
	
	////////////////////
	
	
	// number of inversions overall permutations of size n
	static long[] memo, fac;
	static final int mod = (int) 1e9 + 7;

	static long dp(int n) {
		if (n == 1) {
			return 1;
		}
		if (memo[n] != -1) {
			return memo[n];
		}
		long ans = 0;
		for (int i = 1; i <= n; i++) {
			ans = (ans + fac[n - 1] * (i - 1) + dp(n - 1)) % mod;
		}
	}

	static void solve() throws Exception {
		int n = sc.nextInt();
		fac = new long[n + 1];
		memo = new long[n + 1];
		Arrays.fill(memo, -1);
		fac[0] = 1;
		for (int i = 1; i <= n; i++) {
			fac[i] = i * fac[i - 1] % mod;
		}
		pw.println(dp(n));
	}
	
	
	
	
	/////////////////
	
	
	
	// https://atcoder.jp/contests/dp/tasks/dp_t
	static long[][] memo, memoSum;
	static final int mod = (int) 1e9 + 7;

	static long dpSum(int n, int last) {
		if (last <= 0)
			return 0;
		if (memoSum[n][last] != -1) {
			return memoSum[n][last];
		}
		return memoSum[n][last] = (dp(n, last) + dpSum(n, last - 1)) % mod;
	}

	static String input;

	static long dp(int n, int last) {
		if (n == 0) {
			return 1;
		}
		if (memo[n][last] != -1) {
			return memo[n][last];
		}
		if (input.charAt(n - 1) == '<') {

			return memo[n][last] = dpSum(n - 1, last - 1);
		} else {
			return memo[n][last] = (dpSum(n - 1, n) - dpSum(n - 1, last - 1) + mod) % mod;
		}
	}

	static void solve() throws Exception {
		int n = sc.nextInt();
		input = sc.next();
		memo = new long[n + 1][n + 1];
		memoSum = new long[n + 1][n + 1];
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= n; j++) {
				memo[i][j] = -1;
				memoSum[i][j] = -1;
			}
		}
		long ans = 0;
		for (int i = 1; i <= n; i++) {
			ans = (ans + dp(n - 1, i)) % mod;
		}
		pw.println(ans);
		// or pw.println(dpSum(n - 1, n));
	}
	
	
	///////////////
	
	
	
	
	// given x. find the number of ways to choose k (k >= 1) pair-wise distinct
	// numbers x1, x2, x3... xk such x1 < x2 < x3... < xk and x1 * x2 .. * xk = x.
	static ArrayList<Integer> getDivs(int n) {
		ArrayList<Integer> divs = new ArrayList<>();
		divs.add(1);
		for (int i = 2; i * i <= n; i++) {
			if (n % i == 0) {
				divs.add(i);
				if (i * i != n) {
					divs.add(n / i);
				}
			}
		}
		return divs;
	}

	static HashMap<Integer, Long> memo;

	static long dp(int n) {
		if (n == 1) {
			return 1;
		}
		if (memo.containsKey(n))
			return memo.get(n);
		ArrayList<Integer> myDivs = getDivs(n);
		long ans = 0;
		for (int x : myDivs) {
			ans += dp(x);
		}
		memo.put(n, ans);
		return ans;
	}




///////////////


// given a tree. for each node, calc the sum of distances to all other nodes

static ArrayList<Integer>[] graph;
	static int[] subtreeSize;
	static int n;
	static long ans1;

	static void dfs(int node, int p, int lvl) {
		ans1 += lvl;
		subtreeSize[node] = 1;
		for (int x : graph[node]) {
			if (x == p) {
				continue;
			}
			dfs(x, node, lvl + 1);
			subtreeSize[node] += subtreeSize[x];
		}
	}

	static long ans[];

	static void reroot(int node, int p, long curAns) {
		ans[node] = curAns;
		for (int x : graph[node]) {
			if (x == p)
				continue;
			reroot(x, node, curAns - subtreeSize[x] + (n - subtreeSize[x]));
		}
	}
